Python Interpreter
    python.cpp
        Mainloop -> REPL
            READ
            EVAL
            PRINT
            LOOP
    python_tokens.cpp // Token Analyzer
        READ: https://docs.python.org/3/reference/lexical_analysis.html
        Setup Token Constants
        * Partition Input String Into Tokens *
        * Organize Tokens Into Linked List *
        Handle Exceptions (ie. Invalid Tokens)
        Ignore Comments
    python_evaluate.cpp // Syntax Analyzer
        Evaluate Tokens:
            Identifiers
            Keywords
            Operators
            Literals
        Two Mutually Recursive Functions:
            evaluate -> evaluate expressions
                Identify Builtins/Keywords, Integers, Strings, Etc.
                Evaluate the Builtins/Keywords using apply
            apply -> apply Procedures
        ? Maybe Implement Tail Recursion Optimization
        ? Optimize Memory Consumption (bitmapping?)
            - Reduce Struct/Class memory consumption by alignment (8.2.1)
    python_classes.cpp // Important Classes For Everything
        std::list: // Use This!
            front
            back
        Frames: // Contains Variables Names
            hashmap for variable names and function names
            reference to parent frame
        Objects: // Parent Class For Basically Everything
            https://docs.python.org/3/reference/datamodel.html
        Procedures: // Objects To Hold The CodeIn Function Body
            procedure name -> string
            parameters -> parsed linked list
            function body -> parsed linked list
            parent environment -> environent in which procedure is defined
        Exceptions: // Objects For Exceptions
            ? TBD
    python_builtins.cpp // Builtin Functions
        Hold Builtin Objects (Functions, Exceptions, Booleans, etc.):
            ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
        NEED THIS -> repr()
        Keywords
    python_helpers.cpp // Useful Functions
        Useful Functions:
            Ex: python_string -> Returns if something is a string

indents - assume tabs
variables, initializing, assigning
arithmetic
data structures

def print_and_square(x):
    assert isinstance(x, int)
    print(x)
    return x**2

Procedure("print_and_square")

